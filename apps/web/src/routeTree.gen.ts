/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedStudentsRouteImport } from './routes/_authenticated/students'
import { Route as AuthenticatedSessionsRouteImport } from './routes/_authenticated/sessions'
import { Route as AuthenticatedGuruRouteImport } from './routes/_authenticated/guru'
import { Route as AuthenticatedAdvisorsRouteImport } from './routes/_authenticated/advisors'
import { Route as AuthenticatedStudentsUserIdRouteImport } from './routes/_authenticated/students/$userId'
import { Route as AuthenticatedAdvisorsUserIdRouteImport } from './routes/_authenticated/advisors/$userId'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'
import { ServerRoute as ApiAuthLoginServerRouteImport } from './routes/api/auth/login'
import { ServerRoute as ApiAuthCallbackServerRouteImport } from './routes/api/auth/callback'

const rootServerRouteImport = createServerRootRoute()

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedStudentsRoute = AuthenticatedStudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSessionsRoute = AuthenticatedSessionsRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedGuruRoute = AuthenticatedGuruRouteImport.update({
  id: '/guru',
  path: '/guru',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAdvisorsRoute = AuthenticatedAdvisorsRouteImport.update({
  id: '/advisors',
  path: '/advisors',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedStudentsUserIdRoute =
  AuthenticatedStudentsUserIdRouteImport.update({
    id: '/$userId',
    path: '/$userId',
    getParentRoute: () => AuthenticatedStudentsRoute,
  } as any)
const AuthenticatedAdvisorsUserIdRoute =
  AuthenticatedAdvisorsUserIdRouteImport.update({
    id: '/$userId',
    path: '/$userId',
    getParentRoute: () => AuthenticatedAdvisorsRoute,
  } as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthLoginServerRoute = ApiAuthLoginServerRouteImport.update({
  id: '/api/auth/login',
  path: '/api/auth/login',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthCallbackServerRoute = ApiAuthCallbackServerRouteImport.update({
  id: '/api/auth/callback',
  path: '/api/auth/callback',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/users': typeof UsersRoute
  '/advisors': typeof AuthenticatedAdvisorsRouteWithChildren
  '/guru': typeof AuthenticatedGuruRoute
  '/sessions': typeof AuthenticatedSessionsRoute
  '/students': typeof AuthenticatedStudentsRouteWithChildren
  '/advisors/$userId': typeof AuthenticatedAdvisorsUserIdRoute
  '/students/$userId': typeof AuthenticatedStudentsUserIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/users': typeof UsersRoute
  '/advisors': typeof AuthenticatedAdvisorsRouteWithChildren
  '/guru': typeof AuthenticatedGuruRoute
  '/sessions': typeof AuthenticatedSessionsRoute
  '/students': typeof AuthenticatedStudentsRouteWithChildren
  '/advisors/$userId': typeof AuthenticatedAdvisorsUserIdRoute
  '/students/$userId': typeof AuthenticatedStudentsUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/users': typeof UsersRoute
  '/_authenticated/advisors': typeof AuthenticatedAdvisorsRouteWithChildren
  '/_authenticated/guru': typeof AuthenticatedGuruRoute
  '/_authenticated/sessions': typeof AuthenticatedSessionsRoute
  '/_authenticated/students': typeof AuthenticatedStudentsRouteWithChildren
  '/_authenticated/advisors/$userId': typeof AuthenticatedAdvisorsUserIdRoute
  '/_authenticated/students/$userId': typeof AuthenticatedStudentsUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/users'
    | '/advisors'
    | '/guru'
    | '/sessions'
    | '/students'
    | '/advisors/$userId'
    | '/students/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/users'
    | '/advisors'
    | '/guru'
    | '/sessions'
    | '/students'
    | '/advisors/$userId'
    | '/students/$userId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/users'
    | '/_authenticated/advisors'
    | '/_authenticated/guru'
    | '/_authenticated/sessions'
    | '/_authenticated/students'
    | '/_authenticated/advisors/$userId'
    | '/_authenticated/students/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  UsersRoute: typeof UsersRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/callback': typeof ApiAuthCallbackServerRoute
  '/api/auth/login': typeof ApiAuthLoginServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/callback': typeof ApiAuthCallbackServerRoute
  '/api/auth/login': typeof ApiAuthLoginServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/callback': typeof ApiAuthCallbackServerRoute
  '/api/auth/login': typeof ApiAuthLoginServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/callback' | '/api/auth/login' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/callback' | '/api/auth/login' | '/api/rpc/$'
  id: '__root__' | '/api/auth/callback' | '/api/auth/login' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthCallbackServerRoute: typeof ApiAuthCallbackServerRoute
  ApiAuthLoginServerRoute: typeof ApiAuthLoginServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/students': {
      id: '/_authenticated/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof AuthenticatedStudentsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/sessions': {
      id: '/_authenticated/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof AuthenticatedSessionsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/guru': {
      id: '/_authenticated/guru'
      path: '/guru'
      fullPath: '/guru'
      preLoaderRoute: typeof AuthenticatedGuruRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/advisors': {
      id: '/_authenticated/advisors'
      path: '/advisors'
      fullPath: '/advisors'
      preLoaderRoute: typeof AuthenticatedAdvisorsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/students/$userId': {
      id: '/_authenticated/students/$userId'
      path: '/$userId'
      fullPath: '/students/$userId'
      preLoaderRoute: typeof AuthenticatedStudentsUserIdRouteImport
      parentRoute: typeof AuthenticatedStudentsRoute
    }
    '/_authenticated/advisors/$userId': {
      id: '/_authenticated/advisors/$userId'
      path: '/$userId'
      fullPath: '/advisors/$userId'
      preLoaderRoute: typeof AuthenticatedAdvisorsUserIdRouteImport
      parentRoute: typeof AuthenticatedAdvisorsRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/login': {
      id: '/api/auth/login'
      path: '/api/auth/login'
      fullPath: '/api/auth/login'
      preLoaderRoute: typeof ApiAuthLoginServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/callback': {
      id: '/api/auth/callback'
      path: '/api/auth/callback'
      fullPath: '/api/auth/callback'
      preLoaderRoute: typeof ApiAuthCallbackServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthenticatedAdvisorsRouteChildren {
  AuthenticatedAdvisorsUserIdRoute: typeof AuthenticatedAdvisorsUserIdRoute
}

const AuthenticatedAdvisorsRouteChildren: AuthenticatedAdvisorsRouteChildren = {
  AuthenticatedAdvisorsUserIdRoute: AuthenticatedAdvisorsUserIdRoute,
}

const AuthenticatedAdvisorsRouteWithChildren =
  AuthenticatedAdvisorsRoute._addFileChildren(
    AuthenticatedAdvisorsRouteChildren,
  )

interface AuthenticatedStudentsRouteChildren {
  AuthenticatedStudentsUserIdRoute: typeof AuthenticatedStudentsUserIdRoute
}

const AuthenticatedStudentsRouteChildren: AuthenticatedStudentsRouteChildren = {
  AuthenticatedStudentsUserIdRoute: AuthenticatedStudentsUserIdRoute,
}

const AuthenticatedStudentsRouteWithChildren =
  AuthenticatedStudentsRoute._addFileChildren(
    AuthenticatedStudentsRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedAdvisorsRoute: typeof AuthenticatedAdvisorsRouteWithChildren
  AuthenticatedGuruRoute: typeof AuthenticatedGuruRoute
  AuthenticatedSessionsRoute: typeof AuthenticatedSessionsRoute
  AuthenticatedStudentsRoute: typeof AuthenticatedStudentsRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAdvisorsRoute: AuthenticatedAdvisorsRouteWithChildren,
  AuthenticatedGuruRoute: AuthenticatedGuruRoute,
  AuthenticatedSessionsRoute: AuthenticatedSessionsRoute,
  AuthenticatedStudentsRoute: AuthenticatedStudentsRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthCallbackServerRoute: ApiAuthCallbackServerRoute,
  ApiAuthLoginServerRoute: ApiAuthLoginServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
